/*
Deployment script for EducationSystem

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EducationSystem"
:setvar DefaultFilePrefix "EducationSystem"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[course]...';


GO
CREATE TABLE [dbo].[course] (
    [course_id]   INT           IDENTITY (1, 1) NOT NULL,
    [course_code] NVARCHAR (30) NOT NULL,
    [subject_id]  INT           NOT NULL,
    [teacher_id]  INT           NOT NULL,
    [start_day]   INT           NOT NULL,
    [start_time]  TIME (7)      NOT NULL,
    [seats]       INT           NOT NULL,
    CONSTRAINT [pk_course] PRIMARY KEY CLUSTERED ([course_id] ASC),
    UNIQUE NONCLUSTERED ([course_code] ASC)
);


GO
PRINT N'Creating [dbo].[course_record]...';


GO
CREATE TABLE [dbo].[course_record] (
    [course_record_id] INT      IDENTITY (1, 1) NOT NULL,
    [student_id]       INT      NOT NULL,
    [apply_time]       DATETIME NOT NULL,
    [grade]            INT      NULL,
    CONSTRAINT [pk_course_record] PRIMARY KEY CLUSTERED ([course_record_id] ASC)
);


GO
PRINT N'Creating [dbo].[program]...';


GO
CREATE TABLE [dbo].[program] (
    [program_id]   INT            IDENTITY (1, 1) NOT NULL,
    [program_name] NVARCHAR (100) NOT NULL,
    CONSTRAINT [pk_program] PRIMARY KEY CLUSTERED ([program_id] ASC)
);


GO
PRINT N'Creating [dbo].[student]...';


GO
CREATE TABLE [dbo].[student] (
    [student_id]   INT            IDENTITY (1, 1) NOT NULL,
    [student_name] NVARCHAR (50)  NOT NULL,
    [password]     NVARCHAR (128) NOT NULL,
    CONSTRAINT [pk_student] PRIMARY KEY CLUSTERED ([student_id] ASC)
);


GO
PRINT N'Creating [dbo].[subject]...';


GO
CREATE TABLE [dbo].[subject] (
    [subject_id]   INT           IDENTITY (1, 1) NOT NULL,
    [subject_name] NVARCHAR (50) NOT NULL,
    [program_id]   INT           NOT NULL,
    CONSTRAINT [pk_subject] PRIMARY KEY CLUSTERED ([subject_id] ASC)
);


GO
PRINT N'Creating [dbo].[teacher]...';


GO
CREATE TABLE [dbo].[teacher] (
    [teacher_id]   INT            IDENTITY (1, 1) NOT NULL,
    [teacher_name] NVARCHAR (50)  NOT NULL,
    [password]     NVARCHAR (128) NOT NULL,
    CONSTRAINT [pk_teacher] PRIMARY KEY CLUSTERED ([teacher_id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[course_record]...';


GO
ALTER TABLE [dbo].[course_record]
    ADD DEFAULT (getdate()) FOR [apply_time];


GO
PRINT N'Creating [dbo].[fk_course_subject]...';


GO
ALTER TABLE [dbo].[course] WITH NOCHECK
    ADD CONSTRAINT [fk_course_subject] FOREIGN KEY ([subject_id]) REFERENCES [dbo].[subject] ([subject_id]);


GO
PRINT N'Creating [dbo].[fk_course_teacher]...';


GO
ALTER TABLE [dbo].[course] WITH NOCHECK
    ADD CONSTRAINT [fk_course_teacher] FOREIGN KEY ([teacher_id]) REFERENCES [dbo].[teacher] ([teacher_id]);


GO
PRINT N'Creating [dbo].[fk_course_record_student]...';


GO
ALTER TABLE [dbo].[course_record] WITH NOCHECK
    ADD CONSTRAINT [fk_course_record_student] FOREIGN KEY ([student_id]) REFERENCES [dbo].[student] ([student_id]);


GO
PRINT N'Creating [dbo].[fk_subject_program]...';


GO
ALTER TABLE [dbo].[subject] WITH NOCHECK
    ADD CONSTRAINT [fk_subject_program] FOREIGN KEY ([program_id]) REFERENCES [dbo].[program] ([program_id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[course]...';


GO
ALTER TABLE [dbo].[course] WITH NOCHECK
    ADD CHECK (start_day BETWEEN 1 AND 7);


GO
PRINT N'Creating unnamed constraint on [dbo].[course]...';


GO
ALTER TABLE [dbo].[course] WITH NOCHECK
    ADD CHECK (seats > 0);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[course_record] WITH CHECK CHECK CONSTRAINT [fk_course_record_student];

ALTER TABLE [dbo].[subject] WITH CHECK CHECK CONSTRAINT [fk_subject_program];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.course'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
